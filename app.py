# -*- coding: utf-8 -*-
"""
Aplicaci√≥n Streamlit para Predicci√≥n de Deserci√≥n Estudiantil
Modelo: XGBoost optimizado con Optimizaci√≥n Bayesiana
Basado en metodolog√≠a CRISP-DM
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
from sklearn.preprocessing import MinMaxScaler
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
import plotly.express as px
import plotly.graph_objects as go

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Predicci√≥n Deserci√≥n Estudiantil",
    page_icon="üéì",
    layout="wide"
)

# T√≠tulo principal
st.title('üéì Predicci√≥n de Deserci√≥n Estudiantil')
st.markdown("### Modelo XGBoost con Optimizaci√≥n Bayesiana")

# Funci√≥n para cargar el modelo
@st.cache_resource
def load_model():
    try:
        # Cargar el pipeline completo
        pipeline = joblib.load('pipeline_final_desercion.pkl')
        return pipeline
    except Exception as e:
        st.error(f"Error cargando el modelo: {e}")
        return None

# Funci√≥n para obtener las categor√≠as exactas del entrenamiento
@st.cache_data
def get_training_categories():
    categories = {
        'marital_status': ['Divorced', 'FactoUnion', 'Separated', 'Single'],
        'application_mode': [
            'Admisi√≥n Especial', 'Admisi√≥n Regular', 'Admisi√≥n por Ordenanza',
            'Cambios/Transferencias', 'Estudiantes Internacionales', 'Mayores de 23 a√±os'
        ],
        'course': [
            'Agricultural & Environmental Sciences', 'Arts & Design', 'Business & Management',
            'Communication & Media', 'Education', 'Engineering & Technology',
            'Health Sciences', 'Social Sciences'
        ],
        'previous_qualification': [
            'Higher Education', 'Other', 'Secondary Education', 'Technical Education'
        ],
        'nationality': [
            'Colombian', 'Cuban', 'Dutch', 'English', 'German', 'Italian',
            'Lithuanian', 'Moldovan', 'Mozambican', 'Portuguese', 'Romanian',
            'Santomean', 'Turkish'
        ],
        'mother_qualification': [
            'Basic_or_Secondary', 'Other_or_Unknown', 'Postgraduate', 'Technical_Education'
        ],
        'father_qualification': [
            'Basic_or_Secondary', 'Other_or_Unknown', 'Postgraduate', 'Technical_Education'
        ],
        'mother_occupation': [
            'Administrative/Clerical', 'Skilled Manual Workers', 'Special Cases',
            'Technicians/Associate Professionals', 'Unskilled Workers'
        ],
        'father_occupation': [
            'Administrative/Clerical', 'Professionals', 'Skilled Manual Workers',
            'Special Cases', 'Technicians/Associate Professionals'
        ]
    }
    return categories

# Funci√≥n para crear DataFrame con todas las columnas esperadas
def create_complete_dataframe(user_data, categories):
    """Crear DataFrame con todas las columnas dummies esperadas por el modelo"""
    
    # Crear DataFrame base con datos num√©ricos
    df = pd.DataFrame([{
        'Application order': user_data['application_order'],
        'Daytime/evening attendance': user_data['daytime_evening'],
        'Previous qualification (grade)': user_data['previous_qualification_grade'],
        'Admission grade': user_data['admission_grade'],
        'Displaced': user_data['displaced'],
        'Debtor': user_data['debtor'],
        'Tuition fees up to date': user_data['tuition_fees'],
        'Gender': user_data['gender'],
        'Scholarship holder': user_data['scholarship'],
        'Age at enrollment': user_data['age_enrollment'],
        'Curricular units 1st sem (evaluations)': user_data['cu_1st_evaluations'],
        'Curricular units 1st sem (without evaluations)': user_data['cu_1st_without_eval'],
        'Curricular units 2nd sem (credited)': user_data['cu_2nd_credited'],
        'Curricular units 2nd sem (enrolled)': user_data['cu_2nd_enrolled'],
        'Curricular units 2nd sem (evaluations)': user_data['cu_2nd_evaluations'],
        'Curricular units 2nd sem (approved)': user_data['cu_2nd_approved'],
        'Curricular units 2nd sem (grade)': user_data['cu_2nd_grade'],
        'Curricular units 2nd sem (without evaluations)': user_data['cu_2nd_without_eval'],
        'Unemployment rate': user_data['unemployment_rate'],
        'Inflation rate': user_data['inflation_rate'],
        'GDP': user_data['gdp']
    }])
    
    # Agregar todas las variables dummy (inicializadas en 0)
    dummy_columns = [
        'Marital status_Divorced', 'Marital status_FactoUnion', 'Marital status_Separated', 'Marital status_Single',
        'Application mode_Admisi√≥n Especial', 'Application mode_Admisi√≥n Regular', 'Application mode_Admisi√≥n por Ordenanza',
        'Application mode_Cambios/Transferencias', 'Application mode_Estudiantes Internacionales', 'Application mode_Mayores de 23 a√±os',
        'Course_Agricultural & Environmental Sciences', 'Course_Arts & Design', 'Course_Business & Management',
        'Course_Communication & Media', 'Course_Education', 'Course_Engineering & Technology',
        'Course_Health Sciences', 'Course_Social Sciences',
        'Previous qualification_Higher Education', 'Previous qualification_Other',
        'Previous qualification_Secondary Education', 'Previous qualification_Technical Education',
        'Nacionality_Colombian', 'Nacionality_Cuban', 'Nacionality_Dutch', 'Nacionality_English',
        'Nacionality_German', 'Nacionality_Italian', 'Nacionality_Lithuanian', 'Nacionality_Moldovan',
        'Nacionality_Mozambican', 'Nacionality_Portuguese', 'Nacionality_Romanian', 'Nacionality_Santomean', 'Nacionality_Turkish',
        "Mother's qualification_Basic_or_Secondary", "Mother's qualification_Other_or_Unknown",
        "Mother's qualification_Postgraduate", "Mother's qualification_Technical_Education",
        "Father's qualification_Basic_or_Secondary", "Father's qualification_Other_or_Unknown",
        "Father's qualification_Postgraduate",
        "Mother's occupation_Administrative/Clerical", "Mother's occupation_Skilled Manual Workers",
        "Mother's occupation_Special Cases", "Mother's occupation_Technicians/Associate Professionals",
        "Mother's occupation_Unskilled Workers",
        "Father's occupation_Administrative/Clerical", "Father's occupation_Professionals",
        "Father's occupation_Skilled Manual Workers", "Father's occupation_Special Cases",
        "Father's occupation_Technicians/Associate Professionals"
    ]
    
    # Inicializar todas las dummies en 0
    for col in dummy_columns:
        df[col] = 0
    
    # Activar las dummies correspondientes a las selecciones del usuario
    df[f'Marital status_{user_data["marital_status"]}'] = 1
    df[f'Application mode_{user_data["application_mode"]}'] = 1
    df[f'Course_{user_data["course"]}'] = 1
    df[f'Previous qualification_{user_data["previous_qualification"]}'] = 1
    df[f'Nacionality_{user_data["nationality"]}'] = 1
    df[f"Mother's qualification_{user_data['mother_qualification']}"] = 1
    df[f"Father's qualification_{user_data['father_qualification']}"] = 1
    df[f"Mother's occupation_{user_data['mother_occupation']}"] = 1
    df[f"Father's occupation_{user_data['father_occupation']}"] = 1
    
    return df

# Cargar modelo
pipeline = load_model()

if pipeline is not None:
    st.success("‚úÖ Pipeline cargado exitosamente")

    # Sidebar para informaci√≥n
    st.sidebar.header("‚ÑπÔ∏è Informaci√≥n del Modelo")
    st.sidebar.info("""
    **Modelo:** XGBoost Classifier
    
    **Optimizaci√≥n:** Bayesian Optimization
    
    **M√©tricas de Performance:**
    - F1-Score: ~0.91
    - Accuracy: ~0.89
    - Precision: ~0.88
    - Recall: ~0.94
    
    **Preprocesamiento:**
    - Variables num√©ricas: Normalizadas (MinMaxScaler)
    - Variables categ√≥ricas: One-Hot Encoding
    - Balanceo: SMOTE aplicado
    """)

    # Obtener categor√≠as del entrenamiento
    categories = get_training_categories()

    # Crear formulario de entrada
    st.header("üìä Ingrese los datos del estudiante")

    # Informaci√≥n personal y acad√©mica
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("üë§ Informaci√≥n Personal")
        
        age_enrollment = st.number_input(
            'Edad al momento de inscripci√≥n',
            min_value=16,
            max_value=70,
            value=20,
            help="Edad del estudiante cuando se inscribi√≥"
        )
        
        gender = st.selectbox(
            'G√©nero',
            [0, 1],
            format_func=lambda x: 'Femenino' if x == 0 else 'Masculino',
            help="G√©nero del estudiante"
        )
        
        marital_status = st.selectbox(
            'Estado Civil',
            categories['marital_status'],
            help="Estado civil del estudiante"
        )
        
        displaced = st.selectbox(
            '¬øDesplazado?',
            [0, 1],
            format_func=lambda x: 'No' if x == 0 else 'S√≠',
            help="¬øEs una persona en situaci√≥n de desplazamiento?"
        )
        
        nationality = st.selectbox(
            'Nacionalidad',
            categories['nationality'],
            index=0,  # Por defecto Colombian
            help="Nacionalidad del estudiante"
        )

    with col2:
        st.subheader("üéì Informaci√≥n Acad√©mica")
        
        application_mode = st.selectbox(
            'Modo de Aplicaci√≥n',
            categories['application_mode'],
            index=1,  # Por defecto Admisi√≥n Regular
            help="Forma de ingreso a la instituci√≥n"
        )
        
        course = st.selectbox(
            'Programa de Estudio',
            categories['course'],
            help="Programa acad√©mico matriculado"
        )
        
        daytime_evening = st.selectbox(
            'Jornada',
            [0, 1],
            format_func=lambda x: 'Diurna' if x == 1 else 'Nocturna',
            help="Jornada de estudio"
        )
        
        previous_qualification = st.selectbox(
            'Calificaci√≥n Previa',
            categories['previous_qualification'],
            help="Tipo de educaci√≥n previa"
        )

    # Informaci√≥n econ√≥mica y familiar
    st.subheader("üí∞ Informaci√≥n Econ√≥mica y Familiar")
    col3, col4, col5 = st.columns(3)

    with col3:
        debtor = st.selectbox(
            '¬øDeudor?',
            [0, 1],
            format_func=lambda x: 'No' if x == 0 else 'S√≠',
            help="¬øTiene deudas pendientes?"
        )
        
        tuition_fees = st.selectbox(
            '¬øMatr√≠cula al d√≠a?',
            [0, 1],
            format_func=lambda x: 'No' if x == 0 else 'S√≠',
            help="¬øEst√° al d√≠a con el pago de matr√≠cula?"
        )
        
        scholarship = st.selectbox(
            '¬øBecario?',
            [0, 1],
            format_func=lambda x: 'No' if x == 0 else 'S√≠',
            help="¬øCuenta con beca o ayuda econ√≥mica?"
        )

    with col4:
        mother_qualification = st.selectbox(
            'Educaci√≥n de la Madre',
            categories['mother_qualification'],
            help="Nivel educativo de la madre"
        )
        
        mother_occupation = st.selectbox(
            'Ocupaci√≥n de la Madre',
            categories['mother_occupation'],
            help="Ocupaci√≥n laboral de la madre"
        )

    with col5:
        father_qualification = st.selectbox(
            'Educaci√≥n del Padre',
            categories['father_qualification'],
            help="Nivel educativo del padre"
        )
        
        father_occupation = st.selectbox(
            'Ocupaci√≥n del Padre',
            categories['father_occupation'],
            help="Ocupaci√≥n laboral del padre"
        )

    # Informaci√≥n acad√©mica detallada
    st.subheader("üìö Rendimiento Acad√©mico")
    col6, col7 = st.columns(2)

    with col6:
        st.markdown("**Calificaciones y Orden**")
        
        application_order = st.number_input(
            'Orden de Aplicaci√≥n',
            min_value=0,
            max_value=100,
            value=1,
            help="Orden de preferencia de la carrera"
        )
        
        previous_qualification_grade = st.number_input(
            'Calificaci√≥n Previa',
            min_value=0.0,
            max_value=200.0,
            value=120.0,
            step=0.1,
            help="Calificaci√≥n de educaci√≥n previa"
        )
        
        admission_grade = st.number_input(
            'Calificaci√≥n de Admisi√≥n',
            min_value=0.0,
            max_value=200.0,
            value=120.0,
            step=0.1,
            help="Calificaci√≥n obtenida en el examen de admisi√≥n"
        )

    with col7:
        st.markdown("**Primer Semestre**")
        
        cu_1st_evaluations = st.number_input(
            'Evaluaciones 1er Semestre',
            min_value=0,
            max_value=50,
            value=10,
            help="N√∫mero de evaluaciones en el primer semestre"
        )
        
        cu_1st_without_eval = st.number_input(
            'Sin Evaluaciones 1er Semestre',
            min_value=0,
            max_value=50,
            value=0,
            help="Unidades curriculares sin evaluaci√≥n en el primer semestre"
        )

    # Segundo semestre
    st.markdown("**Segundo Semestre**")
    col8, col9, col10 = st.columns(3)

    with col8:
        cu_2nd_credited = st.number_input(
            'Creditadas 2do Sem',
            min_value=0,
            max_value=50,
            value=0,
            help="Unidades curriculares creditadas"
        )
        
        cu_2nd_enrolled = st.number_input(
            'Inscritas 2do Sem',
            min_value=0,
            max_value=50,
            value=10,
            help="Unidades curriculares inscritas"
        )

    with col9:
        cu_2nd_evaluations = st.number_input(
            'Evaluaciones 2do Sem',
            min_value=0,
            max_value=50,
            value=10,
            help="N√∫mero de evaluaciones"
        )
        
        cu_2nd_approved = st.number_input(
            'Aprobadas 2do Sem',
            min_value=0,
            max_value=50,
            value=8,
            help="Unidades curriculares aprobadas"
        )

    with col10:
        cu_2nd_grade = st.number_input(
            'Calificaci√≥n 2do Sem',
            min_value=0.0,
            max_value=20.0,
            value=12.0,
            step=0.1,
            help="Calificaci√≥n promedio del segundo semestre"
        )
        
        cu_2nd_without_eval = st.number_input(
            'Sin Evaluaciones 2do Sem',
            min_value=0,
            max_value=50,
            value=0,
            help="Unidades curriculares sin evaluaci√≥n"
        )

    # Informaci√≥n macroecon√≥mica
    st.subheader("üìà Indicadores Macroecon√≥micos")
    col11, col12, col13 = st.columns(3)

    with col11:
        unemployment_rate = st.number_input(
            'Tasa de Desempleo (%)',
            min_value=0.0,
            max_value=30.0,
            value=10.2,
            step=0.1,
            help="Tasa de desempleo en el momento de inscripci√≥n"
        )

    with col12:
        inflation_rate = st.number_input(
            'Tasa de Inflaci√≥n (%)',
            min_value=-5.0,
            max_value=20.0,
            value=1.4,
            step=0.1,
            help="Tasa de inflaci√≥n en el momento de inscripci√≥n"
        )

    with col13:
        gdp = st.number_input(
            'PIB',
            min_value=-10.0,
            max_value=10.0,
            value=1.74,
            step=0.01,
            help="Producto Interno Bruto en el momento de inscripci√≥n"
        )

    # Bot√≥n de predicci√≥n
    if st.button('üîÆ Realizar Predicci√≥n', type="primary"):
        try:
            # Recopilar todos los datos
            user_data = {
                'application_order': application_order,
                'daytime_evening': daytime_evening,
                'previous_qualification_grade': previous_qualification_grade,
                'admission_grade': admission_grade,
                'displaced': displaced,
                'debtor': debtor,
                'tuition_fees': tuition_fees,
                'gender': gender,
                'scholarship': scholarship,
                'age_enrollment': age_enrollment,
                'cu_1st_evaluations': cu_1st_evaluations,
                'cu_1st_without_eval': cu_1st_without_eval,
                'cu_2nd_credited': cu_2nd_credited,
                'cu_2nd_enrolled': cu_2nd_enrolled,
                'cu_2nd_evaluations': cu_2nd_evaluations,
                'cu_2nd_approved': cu_2nd_approved,
                'cu_2nd_grade': cu_2nd_grade,
                'cu_2nd_without_eval': cu_2nd_without_eval,
                'unemployment_rate': unemployment_rate,
                'inflation_rate': inflation_rate,
                'gdp': gdp,
                'marital_status': marital_status,
                'application_mode': application_mode,
                'course': course,
                'previous_qualification': previous_qualification,
                'nationality': nationality,
                'mother_qualification': mother_qualification,
                'father_qualification': father_qualification,
                'mother_occupation': mother_occupation,
                'father_occupation': father_occupation
            }

            # Crear DataFrame completo
            df_entrada = create_complete_dataframe(user_data, categories)

            # Mostrar datos ingresados (resumen)
            st.subheader("üìã Resumen de Datos Ingresados")
            
            # Crear resumen m√°s legible
            resumen = pd.DataFrame([
                ['Edad', f"{age_enrollment} a√±os"],
                ['G√©nero', 'Masculino' if gender == 1 else 'Femenino'],
                ['Estado Civil', marital_status],
                ['Programa', course],
                ['Modo de Aplicaci√≥n', application_mode],
                ['Calificaci√≥n de Admisi√≥n', f"{admission_grade:.1f}"],
                ['Calificaci√≥n 2do Semestre', f"{cu_2nd_grade:.1f}"],
                ['Aprobadas 2do Sem', f"{cu_2nd_approved}"],
                ['¬øBecario?', 'S√≠' if scholarship == 1 else 'No'],
                ['¬øMatr√≠cula al d√≠a?', 'S√≠' if tuition_fees == 1 else 'No']
            ], columns=['Variable', 'Valor'])
            
            st.dataframe(resumen, use_container_width=True)

            # Realizar predicci√≥n
            prediccion = pipeline.predict(df_entrada)[0]
            probabilidades = pipeline.predict_proba(df_entrada)[0]

            # Mostrar resultados
            st.header("üéØ Resultados de la Predicci√≥n")

            col14, col15 = st.columns(2)

            with col14:
                if prediccion == 1:
                    st.error("### ‚ö†Ô∏è RIESGO DE DESERCI√ìN")
                    probabilidad_desercion = probabilidades[1]
                    st.error(f"**Probabilidad de Deserci√≥n:** {probabilidad_desercion:.1%}")
                    st.progress(probabilidad_desercion)
                    
                    # Recomendaciones
                    st.markdown("### üìù Recomendaciones")
                    st.warning("""
                    - Brindar acompa√±amiento acad√©mico personalizado
                    - Ofrecer tutor√≠as adicionales
                    - Evaluar opciones de apoyo econ√≥mico
                    - Seguimiento psicol√≥gico y motivacional
                    - Revisi√≥n del plan de estudios personalizado
                    """)
                else:
                    st.success("### ‚úÖ BAJO RIESGO DE DESERCI√ìN")
                    probabilidad_graduacion = probabilidades[0]
                    st.success(f"**Probabilidad de Graduaci√≥n:** {probabilidad_graduacion:.1%}")
                    st.progress(probabilidad_graduacion)
                    
                    st.markdown("### üìù Recomendaciones")
                    st.info("""
                    - Mantener el buen rendimiento acad√©mico
                    - Participar en actividades extracurriculares
                    - Considerar programas de liderazgo estudiantil
                    - Explorar oportunidades de investigaci√≥n
                    - Preparaci√≥n para el mundo laboral
                    """)

            with col15:
                st.subheader("üìä Distribuci√≥n de Probabilidades")
                
                # Crear gr√°fico de barras con Plotly
                fig = go.Figure(data=[
                    go.Bar(
                        x=['Graduaci√≥n', 'Deserci√≥n'],
                        y=[probabilidades[0], probabilidades[1]],
                        marker_color=['green', 'red'],
                        text=[f'{probabilidades[0]:.1%}', f'{probabilidades[1]:.1%}'],
                        textposition='auto',
                    )
                ])
                
                fig.update_layout(
                    title="Probabilidades de Predicci√≥n",
                    yaxis_title="Probabilidad",
                    xaxis_title="Resultado",
                    showlegend=False
                )
                
                st.plotly_chart(fig, use_container_width=True)

            # M√©tricas detalladas
            st.subheader("üìà An√°lisis Detallado")
            
            col16, col17 = st.columns(2)
            with col16:
                st.metric(
                    "Probabilidad de Graduaci√≥n", 
                    f"{probabilidades[0]:.4f}", 
                    f"{probabilidades[0]:.1%}"
                )
            with col17:
                st.metric(
                    "Probabilidad de Deserci√≥n", 
                    f"{probabilidades[1]:.4f}", 
                    f"{probabilidades[1]:.1%}"
                )

            # Informaci√≥n contextual
            st.subheader("üìö Informaci√≥n del Contexto")
            st.info(f"""
            **Interpretaci√≥n de Resultados:**
            
            - **Graduaci√≥n (0):** El estudiante tiene alta probabilidad de completar sus estudios exitosamente
            - **Deserci√≥n (1):** El estudiante tiene riesgo de abandonar los estudios antes de graduarse
            
            **Distribuci√≥n en el conjunto de entrenamiento:**
            - Estudiantes que se graduaron: ~67%
            - Estudiantes que desertaron: ~33%
            
            **Confianza del Modelo:** F1-Score de 91% (Excelente performance)
            
            Esta predicci√≥n puede ayudar a las instituciones educativas a implementar 
            estrategias de retenci√≥n estudiantil de manera proactiva y personalizada.
            """)

            # Factores de riesgo identificados
            if prediccion == 1:
                st.subheader("üö® Factores de Riesgo Identificados")
                
                factores_riesgo = []
                
                if cu_2nd_grade < 10:
                    factores_riesgo.append("Calificaci√≥n baja en segundo semestre")
                if cu_2nd_approved < cu_2nd_enrolled * 0.7:
                    factores_riesgo.append("Bajo porcentaje de materias aprobadas")
                if debtor == 1:
                    factores_riesgo.append("Situaci√≥n de deuda")
                if tuition_fees == 0:
                    factores_riesgo.append("Matr√≠cula no actualizada")
                if scholarship == 0 and debtor == 1:
                    factores_riesgo.append("Sin apoyo econ√≥mico y con deudas")
                if age_enrollment > 25:
                    factores_riesgo.append("Ingreso tard√≠o a la educaci√≥n superior")
                
                if factores_riesgo:
                    for factor in factores_riesgo:
                        st.warning(f"‚Ä¢ {factor}")
                else:
                    st.info("No se identificaron factores de riesgo espec√≠ficos obvios.")

        except Exception as e:
            st.error(f"Error en la predicci√≥n: {e}")
            st.info("Verifique que todos los campos est√©n correctamente completados.")

else:
    st.error("‚ùå No se pudo cargar el pipeline del modelo.")
    st.info("üìÅ Aseg√∫rese de que el archivo 'pipeline_final_desercion.pkl' est√© en el directorio.")

# Footer
st.markdown("---")
st.markdown("**üéì Sistema de Predicci√≥n de Deserci√≥n Estudiantil**")
st.markdown("*Modelo XGBoost optimizado con Bayesian Optimization | F1-Score: 91%*")
st.markdown("*Desarrollado siguiendo metodolog√≠a CRISP-DM para Anal√≠tica de Datos*")